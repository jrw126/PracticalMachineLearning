corrgram(mtcars, order=TRUE, lower.panel = panel.shade, upper.panel = panel.pie, text.panel = panel.txt, main = "Corrgram of mtcars")
corrgram(mtcars, order=TRUE, lower.panel = panel.shade, upper.panel = panel.pie, text.panel = panel.txt, main = "Corrgram of mtcars Variables")
corrgram(mtcars, order=TRUE, lower.panel = panel.shade, upper.panel = panel.pie, text.panel = panel.txt, main = "Corrgram of mtcars Variables")
corrgram(mtcars, order=TRUE, lower.panel = panel.shade, upper.panel = panel.pie, text.panel = panel.txt, main = "Correlogram of mtcars Variables")
plot(mtcars$am, m1.res, xlab = "Transmission", ylab = "Residuals", main = "MPG Residual Plot", pch = 21, bg = "black"); abline(0, 0, col = "red", lwd = 2)
data(mtcars)
library(lattice)
library(corrgram)
mtcars$am[mtcars$am == 0] <- "Automatic"; mtcars$am[mtcars$am == 1] <- "Manual"
for (f in c("cyl", "vs", "am", "gear", "carb")) {
mtcars[, f] <- as.factor(mtcars[, f])
}
a <- mtcars[mtcars$am == "Automatic", ]; m <- mtcars[mtcars$am == "Manual", ] # Split the data by transmission type
t.test(a$mpg, m$mpg)
m1 <- lm(mpg ~ am, data = mtcars)
summary(m1)
m1.res <- resid(m1) # Residuals for figure 5
m2 <- lm(mpg ~ am + wt + drat + hp, data = mtcars)
summary(m2)
anova(m1, m2)
summary(m2)
summary(m1)$coefficients
summary(m1)
plot(m2)
summary(m2)
plot(mtcars$am, m1.res, xlab = "Transmission", ylab = "Residuals", main = "MPG Residual Plot", pch = 21, bg = "black"); abline(0, 0, col = "red", lwd = 2)
m2.res <- resid(m2)
plot(mtcars$am, m2.res)
data(mtcars)
par(mfrow = c(1, 2))
plot(mtcars$am, m1.res, xlab = "Transmission", ylab = "Residuals", main = "MPG Residual Plot", pch = 21, bg = "black"); abline(0, 0, col = "red", lwd = 2)
plot(mtcars$am, m2.res)
plot(mtcars$am, m2.res); abline(0, 0, col = "red", lwd = 2)
plot(m2.res)
dev.off()
plot(m2.res)
plot(m1.res)
plot(m2)
plot(m2.res)
plot(m2)
plot(fitted(m2), m2.res)
plot(fitted(m1), m1.res)
plot(m1)
fitted(m1)
plot(m1)
plot(m2)
plot(fitted(m1), m1.res)
par(mfrow = c(1, 2))
plot(fitted(m1), m1.res, ylim = c(-10, 10), xlab = "Fitted Values", ylab = "Residuals", main = "MPG Residual Plot", pch = 21, bg = "black"); abline(0, 0, col = "red", lwd = 2)
plot(fitted(m2), m2.res, ylim = c(-10, 10)); abline(0, 0, col = "red", lwd = 2)
par(mfrow = c(1, 2))
plot(fitted(m1), m1.res, ylim = c(-10, 10), xlab = "Fitted Values", ylab = "Residuals", main = "Single Variable Model", pch = 21, bg = "black")
abline(0, 0, col = "red", lwd = 2)
plot(fitted(m2), m2.res, ylim = c(-10, 10), xlab = "Fitted Values", ylab = "Residuals", main = "Multivariate Model", pch = 21, bg = "black")
abline(0, 0, col = "red", lwd = 2)
par(mfrow = c(1, 2))
plot(fitted(m1), m1.res, ylim = c(-10, 10), xlab = "Fitted Values", ylab = "Residuals", main = "Single Variable Model", pch = 21, bg = "black")
abline(0, 0, col = "red", lwd = 2)
plot(fitted(m2), m2.res, ylim = c(-10, 10), xlab = "Fitted Values", main = "Multivariate Model", pch = 21, bg = "black")
abline(0, 0, col = "red", lwd = 2)
plot(fitted(m2), m2.res, ylim = c(-10, 10), xlab = "Fitted Values", ylab = "", main = "Multivariate Model", pch = 21, bg = "black")
par(mfrow = c(1, 2))
plot(fitted(m1), m1.res, ylim = c(-10, 10), xlab = "Fitted Values", ylab = "Residuals", main = "Single Variable Model", pch = 21, bg = "black")
abline(0, 0, col = "red", lwd = 2)
plot(fitted(m2), m2.res, ylim = c(-10, 10), xlab = "Fitted Values", ylab = "", main = "Multivariate Model", pch = 21, bg = "black")
abline(0, 0, col = "red", lwd = 2)
?mtcars
summary(m2)
summary(m1)
summary(m1)$coefficients
summary(m1)$coefficients[2]
summary(m2)$coefficients[2]
summary(m1)$coefficients[2] - summary(m2)$coefficients[2] / summary(m1)$coeffcients[2]
(summary(m1)$coefficients[2] - summary(m2)$coefficients[2]) / summary(m1)$coeffcients[2]
7.24-1.57
5.67/1.57
(summary(m1)$coefficients["amManual"] - summary(m2)$coefficients["amManual"]) / summary(m1)$coeffcients["amManual"]
summary(m1)$coefficients["amManual"]
summary(m1)$coefficients["Manual"]
summary(m1)$coefficients["am"]
summary(m1)$coefficients[2]
1+1
summary(m1)$coefficients[2]
summary(m1)$coefficients[2] - summary(m2)$coefficients[2]
(summary(m1)$coefficients[2] - summary(m2)$coefficients[2]) / summary(m1)$coefficients[2]
(summary(m1)$coefficients[2] - summary(m2)$coefficients[2]) / summary(m1)$coefficients[1]
(summary(m1)$coefficients[2] - summary(m2)$coefficients[2]) / summary(m1)$coefficients[2]
summary(m1)$coefficients
summary(m1$)R-squared
summary(m1$)R
summary(m1$)residuals
summary(m1)residuals
summary(m1)$residuals
summary(m1)$multiple
summary(m1)$Multiple
summary(m1)$R-squared
summary(m1)$rsquared
summary(m1)$r.squared
summary(m1)$coefficients
summary(m1)$r.squared
(summary(m1)$coefficients[2] - summary(m2)$coefficients[2]) / summary(m1)$coefficients[2] * 100
paste((summary(m1)$coefficients[2] - summary(m2)$coefficients[2]) / summary(m1)$coefficients[2] * 100, "%", sep = "")
paste(round((summary(m1)$coefficients[2] - summary(m2)$coefficients[2]) / summary(m1)$coefficients[2] * 100, 2), "%", sep = "")
paste(round((summary(m1)$coefficients[2] - summary(m2)$coefficients[2]) / summary(m1)$coefficients[2] * 100, 1), "%", sep = "")
summary(m1)
summary(m1)$coefficients[1]
summary(m1)$coefficients[2]
summary(m1)$r.squared
?lm
summary(m2)$coefficients[2]
summary(m2)$r.squared * 100
paste(round(summary(m2)$r.squared * 100, 0), "%", sep = "")
round(summary(m1)$coefficients[2], 1)
round(summary(m2)$coefficients[2], 1)
m1 <- lm(mpg ~ am, data = mtcars)
round(summary(m1)$coefficients[2], 1)
round(summary(m2)$coefficients[2], 1)
t.test(a$mpg, m$mpg)
t.test(a$mpg, m$mpg)$p.value
round(t.test(a$mpg, m$mpg)$p.value, 4()
round(t.test(a$mpg, m$mpg)$p.value, 4)
test <- t.test(a$mpg, m$mpg)
test
summary(m2)$coefficients[2]
round(summary(m2)$coefficients[2], 2)
plt <- bwplot(mpg ~ am, data = mtcars, main = "MPG by Transmission Type", xlab="", ylab = "MPG",
par.settings = list(box.umbrella = list(col = c("pink", "lightblue"),
lwd=2.5), box.dot = list(cex=2), box.rectangle = list(fill = c("pink","lightblue"),
col = c("pink", "lightblue"), lwd = 2.5)))
update(plt, par.settings = list(fontsize = list(text = 8, points = 4))
library(lattice)
plt <- bwplot(mpg ~ am, data = mtcars, main = "MPG by Transmission Type", xlab="", ylab = "MPG",
par.settings = list(box.umbrella = list(col = c("pink", "lightblue"),
lwd=2.5), box.dot = list(cex=2), box.rectangle = list(fill = c("pink","lightblue"),
col = c("pink", "lightblue"), lwd = 2.5)))
update(plt, par.settings = list(fontsize = list(text = 8, points = 4))
plt
?par.settings
?par
?bwplot
bwplot(mpg ~ am, data = mtcars, main = "MPG by Transmission Type", xlab="", ylab = "MPG",
par.settings = list(box.umbrella = list(col = c("pink", "lightblue"),
lwd=2.5), box.dot = list(cex=2), box.rectangle = list(fill = c("pink","lightblue"),
col = c("pink", "lightblue"), lwd = 2.5)), fontsize = list(text = 8, points = 4))
library(lattice)
bwplot(mpg ~ am, data = mtcars, main = "MPG by Transmission Type", xlab="", ylab = "MPG",
par.settings = list(box.umbrella = list(col = c("pink", "lightblue"),
lwd=2.5), box.dot = list(cex=2), box.rectangle = list(fill = c("pink","lightblue"),
col = c("pink", "lightblue"), lwd = 2.5)), fontsize = list(text = 8, points = 4))
library(gridExtra)
install.packages("gridExtra")
data(mtcars); library(lattice); library(corrgram)
mtcars$am[mtcars$am == 0] <- "Automatic"; mtcars$am[mtcars$am == 1] <- "Manual"
for (f in c("cyl", "vs", "am", "gear", "carb")) {
mtcars[, f] <- as.factor(mtcars[, f])
}     # Convert categorical data to the factor class.
# Split the data by transmission type and run a t-test
a <- mtcars[mtcars$am == "Automatic", ]; m <- mtcars[mtcars$am == "Manual", ]
t.test(a$mpg, m$mpg)
# Transmission is the sole predictor.
m1 <- lm(mpg ~ am, data = mtcars)
# This multivariate model uses transmission, weight, rear axle ratio, and horsepower.
m2 <- lm(mpg ~ am + wt + drat + hp, data = mtcars)
plt1 <- bwplot(mpg ~ am, data = mtcars, main = "MPG by Transmission Type", xlab="", ylab = "MPG",
par.settings = list(box.umbrella = list(col = c("pink", "lightblue"),
lwd=2.5), box.dot = list(cex=2), box.rectangle = list(fill = c("pink","lightblue"),
col = c("pink", "lightblue"), lwd = 2.5)), fontsize = list(text = 8, points = 4))
plt2<-xyplot(mpg ~ wt | am * cyl, data = mtcars,
main = "MPG vs Weight by Transmission by Cylinders",
xlab = "Weight (lb/1000)",
ylab = "MPG",
panel = function(x, y, ...) {
panel.abline(v = median(mtcars$wt),
lty = "dotted",
col = "red",
lwd = 2)
panel.xyplot(x, y, ...)
})
grid.arrange(plt1, plt2, ncol = 2)
library(gridExtra)
grid.arrange(plt1, plt2, ncol = 2)
grid.arrange(plt1, plt2, nrow = 2)
trellis.par.get("fontsize")
plt1
update(plt1, par.settings = list(fontsize = list(text = 8, points = 4)))
update(plt1, par.settings = list(fontsize = list(text = 8, points = 4)))
influence.measures(q5)
q5 <- lm(y ~ x)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
q5 <- lm(y ~ x)
influence.measures(q5)
-1.34e+02
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?influence.measures
q5 <- lm(y ~ x)
influence.measures(q5)
lm.influence(q5)
plot(data.frame(y = y, x = x))
abline(q5)
plot(data.frame(x = x, y = y))
abline(q5)
abline(lm(y[1:4] ~ x[1:4]))
q1 <- lm(mpg ~ as.factor(cyl) + wt, data = mtcars)
q2 <- lm(mpg ~ as.factor(cyl), data = mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars) # JW NOTE: Code supplied from question
lm(mpg ~ I(wt) + factor(cyl), data = mtcars) # JW NOTE: Code supplied from question
?mtcars
?I
m1 <- q2
m2 <- lm(mpg ~ as.factor(cyl) + wt, data = mtcars)
m2 <- lm(mpg ~ as.factor(cyl) + wt + as.factor(cyl) * wt, data = mtcars)
anova(m1,m2)
library(lttest)
library(lrtest)
m1
lm(mpg ~ factor(cyl) * wt, data = mtcars)
lm(mpg~factor(cyl):wt, mtcars)
lm(mpg~factor(cyl) + wt + factor(cyl):wt, mtcars)
lm(mpg~as.factor(cyl) + wt + as.factor(cyl):wt, mtcars)
m1 <- q2
m2 <- lm(mpg ~ as.factor(cyl) + wt + as.factor(cyl):wt, data = mtcars)
anova(m1, m2)
anova(m1,m2)$p.value
anova(m1,m2)$p.values
lm(mpg~factor(cyl)+wt+factor(cyl)*wt,mtcars)
m1 <- q2
m2 <- lm(mpg ~ as.factor(cyl) + wt + as.factor(cyl) * wt, data = mtcars)
anova(m1, m2)
library(RCurl)
library(XML)
html <- getURL("http://wiki.teamliquid.net/starcraft2/Recent_Tournament_Results")
doc <- htmlParse(html, asText = TRUE)
plain.text <- xpathSApply(doc, "//p", xmlValue)
cat(paste(plain.text, collapse = "\n"))
View(html)
url <- "http://wiki.teamliquid.net/starcraft2/Recent_Tournament_Results"
url <- "http://wiki.teamliquid.net/starcraft2/Recent_Tournament_Results"
library(XML)
?shuttle
libary(MASS)
library(MASS)
?shuttle
data(shuttle)
View(shuttle)
sapply(names(shuttle), function(x) class(shuttle[, x]))
?lm
q1 <- lm(use ~ wind, data = shuttle)
?logit
q1 <- glm(use ~ wind, data = shuttle, family = binomial())
q1
summary(q1)
levels(shuttle$use)
?odds
exp(coef(q1))
names(shuttle)
q2 <- glm(use ~ winds + magn, data = shuttle, family = binomial())
q2 <- glm(use ~ wind + magn, data = shuttle, family = binomial())
exp(coef(q2))
q3 <- glm(I(1 - use) ~ wind, data = shuttle, family = binomial())
q3 <- glm(1 - use ~ wind, data = shuttle, family = binomial())
?relevel
relevel(shuttle$use)
relevel(shuttle$use, 0)
relevel(shuttle$use, c(0, 1))
q3 <- glm(as.factor(I(as.numeric(1 - use)))) ~ wind, data = shuttle, family = binomial())
q3 <- glm(as.factor(I(as.numeric(1 - use))) ~ wind, data = shuttle, family = binomial())
as.numeric(shuttle$use)
q3 <- glm(use, data = shuttle, family = binomial())
data(shuttle)
q3 <- glm(use, data = shuttle, family = binomial())
q1
coef(q1)
exp(coef(q1)) / (1 + exp(coef(q1)))
1/-.25131443
?glm
data(InsectSprays)
View(InsectSprays)
?relevel
?offset
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd = 3, col = "red")
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes, varEst)
all.equal(varChild, sum(varRes, varEst))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag + dist, attenu)
mean(efit$residuals)
cov(residuals(efit), attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child~parent,galton)
sqrt(sum(fit$residuals^2)/n-2)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit$residuals)
sRes <- deviance(fit$residual)
sRes <- deviance(sTot)
sRes <- sum(fit)
sRes <- 1
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
swirl()
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(tress)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1, trees2)
lapply(list(fit, fit2), coef)
library(swirl)
swirl()
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Education, swiss$Examination)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
coef(all) - coef(efit)
all$coef - efit$coef
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
sB
summary(InsectSprays[, 2])
sapply(names(InsectSprays), function(x) class(InsectSprays[, x]))
sapply(InsectSprays, class)
fit <- lm(count ~ spray, InsectSprays)
fit$coef
summary(fit)$coef
est <- summary(fit)$coef[, 1]
mean(sA$count)
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "c")
spray2 <- relevel(InsectSprays$spray, c)
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, spray2)
fit2 <- lm(counts ~ spray, spray2)
fit2 <- lm(counts ~ spray2, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2] - fit$coef[3]) / 1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric[hunger$Sex == "Female"] ~ Year[hunger$Sex == "Female"], hunger)
lmM <- lm(Numeric[hunger$Sex == "Male"] ~ Year[hunger$Sex == "Male"], hunger)
lmBoth <- lm(Numeric ~ Sex + Year, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit <- lm(y~x, out2)
plot(fit, which = 1)
fitno <- lm(y~x, out2[-1,])
plot(fitno, which=1)
coef(fit) - coef(fitno)
View(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1 - resid(fit)[1] / resno
View(hatvalues(fit))
sigma <- sd(resid(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit) / sigma * sqrt(1 - hatvalues(fit))
rstd <- resid(fit) / (sigma * sqrt(1 - hatvalues(fit)))
View(cbind(rstd, rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1 <- sqrt(deviance(fitno) / df.residual(fitno))
resid(fit)[1] / (sigma1 * sqrt(1 - hatvalues(fit)[1]))
View(rstudent(fit))
predict(fitno, out2) - predict(fit, out2)
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2) / (2 * sigma^2)
plot(fit,which=5)
rgp1()
rgp2()
View(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- deviance(fit1) - deviance(fit3)
n <- (deviance(fit1) - deviance(fit3)) / 2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals
)
anova(fit1, fit3, fit5, fit6)
a <- c(0, 100, 100, 100)
median(a)
a <- c(0, 0 ,0 ,0, 100)
median(a)
mean(a)
a <- c(0, 100, 100, 100)
mean(a)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
manipulate(myPlot)
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
install.packages("rCharts")
library(rCharts)
install.packages("shiny")
SkillCraft1_Dataset <- read.csv("C:/Users/John/Desktop/SkillCraft1_Dataset.csv")
View(SkillCraft1_Dataset)
library(caret)
library(corrgram)
library(Hmisc)
library(randomForest)
library(ggplot2)
setwd("D:/Coursera/Practical Machine Learning/PracticalMachineLearning")
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
idx <- setdiff(which(!sapply(1:ncol(test), function(x) sum(is.na(test[, x])) == nrow(test))), 1:7)
train <- train[, idx]
test <- test[, idx]
# Check if there are any mismatched data types.
t <- which(!sapply(train, class) == sapply(test, class))
t
# Convert the types that don't match
test[, t[1:3]] <- lapply(test[, t[1:3]], as.numeric)
test$problem_id <- factor(test$problem_id)
# Split the training and testing sets
inTrain <- createDataPartition(train$classe, p = 3/4, list = FALSE)
training <- train[inTrain, ]
testing <- train[-inTrain, ]
qplot(1:nrow(train), train$pitch_belt, color = train$classe)
M <- abs(cor(training[, sapply(training, is.numeric)]))
diag(M) <- 0 # Ignore correlation of variables with itself.
M <- which(M > 0.8, arr.ind = T)
set.seed(123)
# Perform PCA preprocessing on all numeric variables
pp <- preProcess(training[, sapply(training, is.numeric)], method = "pca")
m1_PC <- predict(pp, training[, sapply(training, is.numeric)])
# Fit a model using K nearest neighbors on the preprocessed data.
m1_fit <- train(training$classe ~ ., method = "knn", data = m1_PC)
# Predict the test data values
m1_pred <- predict(pp, testing[, sapply(testing, is.numeric)])
problem_id <- predict(m1_fit, m1_pred)
# Evaluate the model
confusionMatrix(problem_id, testing$classe)
m2_fit <- randomForest(classe ~ ., data = training)
# Predict the test data
m2_pred <- predict(m2_fit, testing)
# Evaluate the model
confusionMatrix(m2_pred, testing$classe)
plot(m2_fit)
install.packages("cvTools")
source('~/.active-rstudio-document', echo=TRUE)
?confusionMatrix
confusionMatrix(m2_pred, cv$classe)$overall
confusionMatrix(m2_pred, cv$classe)$overall[1]
source('~/.active-rstudio-document', echo=TRUE)
confusionMatrix(m2_pred_test, testing$classe)$overall[1]
